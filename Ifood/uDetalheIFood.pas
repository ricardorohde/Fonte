unit uDetalheIFood;

{*******************************************************************************
    Generated By   : JsonToDelphiClass - 0.65 
    Project link   : https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
    Generated On   : 2018-02-19 09:40:55

    Created By     : Petar Georgiev - 2014 (http://pgeorgiev.com) 
    Adapted Web By : Marlon Nardi - 2016 (http://jsontodelphi.com)
*******************************************************************************}

interface

uses Generics.Collections, Rest.Json;

type

TCoordinatesClass = class
private
  FLatitude: Extended;
  FLongitude: Extended;
public
  property latitude: Extended read FLatitude write FLatitude;
  property longitude: Extended read FLongitude write FLongitude;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TCoordinatesClass;
end;

TDeliveryAddressClass = class
private
  FCity: String;
  FCoordinates: TCoordinatesClass;
  FCountry: String;
  FFormattedAddress: String;
  FNeighborhood: String;
  FPostalCode: String;
  FState: String;
  FStreetName: String;
  FStreetNumber: String;
public
  property city: String read FCity write FCity;
  property coordinates: TCoordinatesClass read FCoordinates write FCoordinates;
  property country: String read FCountry write FCountry;
  property formattedAddress: String read FFormattedAddress write FFormattedAddress;
  property neighborhood: String read FNeighborhood write FNeighborhood;
  property postalCode: String read FPostalCode write FPostalCode;
  property state: String read FState write FState;
  property streetName: String read FStreetName write FStreetName;
  property streetNumber: String read FStreetNumber write FStreetNumber;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TDeliveryAddressClass;
end;

TSubItemsClass = class
private
  FAddition: Extended;
  FDiscount: Extended;
  FExternalCode: String;
  FName: String;
  FPrice: Extended;
  FQuantity: Extended;
  FTotalPrice: Extended;
public
  property addition: Extended read FAddition write FAddition;
  property discount: Extended read FDiscount write FDiscount;
  property externalCode: String read FExternalCode write FExternalCode;
  property name: String read FName write FName;
  property price: Extended read FPrice write FPrice;
  property quantity: Extended read FQuantity write FQuantity;
  property totalPrice: Extended read FTotalPrice write FTotalPrice;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TSubItemsClass;
end;

TItemsClass = class
private
  FAddition: Extended;
  FDiscount: Extended;
  FExternalCode: String;
  FName: String;
  FPrice: Extended;
  FQuantity: Extended;
  FSubItems: TArray<TSubItemsClass>;
  FSubItemsPrice: Extended;
  FTotalPrice: Extended;
public
  property addition: Extended read FAddition write FAddition;
  property discount: Extended read FDiscount write FDiscount;
  property externalCode: String read FExternalCode write FExternalCode;
  property name: String read FName write FName;
  property price: Extended read FPrice write FPrice;
  property quantity: Extended read FQuantity write FQuantity;
  property subItems: TArray<TSubItemsClass> read FSubItems write FSubItems;
  property subItemsPrice: Extended read FSubItemsPrice write FSubItemsPrice;
  property totalPrice: Extended read FTotalPrice write FTotalPrice;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TItemsClass;
end;

TCustomerClass = class
private
  FEmail: String;
  FId: String;
  FName: String;
  FPhone: String;
public
  property email: String read FEmail write FEmail;
  property id: String read FId write FId;
  property name: String read FName write FName;
  property phone: String read FPhone write FPhone;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TCustomerClass;
end;

TPaymentsClass = class
private
  FCode: String;
  FName: String;
  FPrepaid: Boolean;
  FValue: Extended;
public
  property code: String read FCode write FCode;
  property name: String read FName write FName;
  property prepaid: Boolean read FPrepaid write FPrepaid;
  property value: Extended read FValue write FValue;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPaymentsClass;
end;

TAddressClass = class
private
  FCity: String;
  FCountry: String;
  FFormattedAddress: String;
  FNeighborhood: String;
  FPostalCode: String;
  FState: String;
  FStreetName: String;
  FStreetNumber: String;
public
  property city: String read FCity write FCity;
  property country: String read FCountry write FCountry;
  property formattedAddress: String read FFormattedAddress write FFormattedAddress;
  property neighborhood: String read FNeighborhood write FNeighborhood;
  property postalCode: String read FPostalCode write FPostalCode;
  property state: String read FState write FState;
  property streetName: String read FStreetName write FStreetName;
  property streetNumber: String read FStreetNumber write FStreetNumber;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TAddressClass;
end;

TMerchantClass = class
private
  FAddress: TAddressClass;
  FId: String;
  FName: String;
  FPhones: TArray<String>;
public
  property address: TAddressClass read FAddress write FAddress;
  property id: String read FId write FId;
  property name: String read FName write FName;
  property phones: TArray<String> read FPhones write FPhones;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TMerchantClass;
end;

TDetClass = class
private
  FCreatedAt: String;
  FCustomer: TCustomerClass;
  FDeliveryAddress: TDeliveryAddressClass;
  FDeliveryDateTime: String;
  FDeliveryFee: Extended;
  FId: String;
  FItems: TArray<TItemsClass>;
  FMerchant: TMerchantClass;
  FPayments: TArray<TPaymentsClass>;
  FReference: String;
  FShortReference: String;
  FSubTotal: Extended;
  FTotalPrice: Extended;
  FType: String;
public
  property createdAt: String read FCreatedAt write FCreatedAt;
  property customer: TCustomerClass read FCustomer write FCustomer;
  property deliveryAddress: TDeliveryAddressClass read FDeliveryAddress write FDeliveryAddress;
  property deliveryDateTime: String read FDeliveryDateTime write FDeliveryDateTime;
  property deliveryFee: Extended read FDeliveryFee write FDeliveryFee;
  property id: String read FId write FId;
  property items: TArray<TItemsClass> read FItems write FItems;
  property merchant: TMerchantClass read FMerchant write FMerchant;
  property payments: TArray<TPaymentsClass> read FPayments write FPayments;
  property reference: String read FReference write FReference;
  property shortReference: String read FShortReference write FShortReference;
  property subTotal: Extended read FSubTotal write FSubTotal;
  property totalPrice: Extended read FTotalPrice write FTotalPrice;
  property &type: String read FType write FType;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TDetClass;
end;

implementation

{TCoordinatesClass}


function TCoordinatesClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCoordinatesClass.FromJsonString(AJsonString: string): TCoordinatesClass;
begin
  result := TJson.JsonToObject<TCoordinatesClass>(AJsonString)
end;

{TDeliveryAddressClass}

constructor TDeliveryAddressClass.Create;
begin
  inherited;
  FCoordinates := TCoordinatesClass.Create();
end;

destructor TDeliveryAddressClass.Destroy;
begin
  FCoordinates.Free;
  inherited;
end;

function TDeliveryAddressClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TDeliveryAddressClass.FromJsonString(AJsonString: string): TDeliveryAddressClass;
begin
  result := TJson.JsonToObject<TDeliveryAddressClass>(AJsonString)
end;

{TSubItemsClass}


function TSubItemsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TSubItemsClass.FromJsonString(AJsonString: string): TSubItemsClass;
begin
  result := TJson.JsonToObject<TSubItemsClass>(AJsonString)
end;

{TItemsClass}

destructor TItemsClass.Destroy;
var
  LsubItemsItem: TSubItemsClass;
begin

 for LsubItemsItem in FSubItems do
   LsubItemsItem.Free;

  inherited;
end;

function TItemsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TItemsClass.FromJsonString(AJsonString: string): TItemsClass;
begin
  result := TJson.JsonToObject<TItemsClass>(AJsonString)
end;

{TCustomerClass}


function TCustomerClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCustomerClass.FromJsonString(AJsonString: string): TCustomerClass;
begin
  result := TJson.JsonToObject<TCustomerClass>(AJsonString)
end;

{TPaymentsClass}


function TPaymentsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPaymentsClass.FromJsonString(AJsonString: string): TPaymentsClass;
begin
  result := TJson.JsonToObject<TPaymentsClass>(AJsonString)
end;

{TAddressClass}


function TAddressClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAddressClass.FromJsonString(AJsonString: string): TAddressClass;
begin
  result := TJson.JsonToObject<TAddressClass>(AJsonString)
end;

{TMerchantClass}

constructor TMerchantClass.Create;
begin
  inherited;
  FAddress := TAddressClass.Create();
end;

destructor TMerchantClass.Destroy;
begin
  FAddress.Free;
  inherited;
end;

function TMerchantClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMerchantClass.FromJsonString(AJsonString: string): TMerchantClass;
begin
  result := TJson.JsonToObject<TMerchantClass>(AJsonString)
end;

{TDetClass}

constructor TDetClass.Create;
begin
  inherited;
  FMerchant := TMerchantClass.Create();
  FCustomer := TCustomerClass.Create();
  FDeliveryAddress := TDeliveryAddressClass.Create();
end;

destructor TDetClass.Destroy;
var
  LpaymentsItem: TPaymentsClass;
  LitemsItem: TItemsClass;
begin

 for LpaymentsItem in FPayments do
   LpaymentsItem.Free;
 for LitemsItem in FItems do
   LitemsItem.Free;

  FMerchant.Free;
  FCustomer.Free;
  FDeliveryAddress.Free;
  inherited;
end;

function TDetClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TDetClass.FromJsonString(AJsonString: string): TDetClass;
begin
  result := TJson.JsonToObject<TDetClass>(AJsonString)
end;

end.
